let make24=(values,count=24)=>{if(!(values instanceof Array)){throw new TypeError("Values must be an array")}if(count==null||+count!=+count||!Number.isFinite(+count)){throw new TypeError("Count cannot be an invalid value")}values.map(e=>{if(e==null||+e!=+e||!Number.isFinite(+e)){throw new TypeError("Values cannot have invalid values")}});if(values.length==0)return[];if(values.length==1){if(values[0]==count)return values;else return[]}let stack=str=>{let arr=[],ele=str.split(" ");for(let i in ele){arr.push(ele[i]);while("+-*/".includes(arr.at(-3))&&!isNaN(+arr.at(-2))&&!isNaN(+arr.at(-1))){arr.splice(-3,3,eval("("+arr.at(-2)+")"+arr.at(-3)+"("+arr.at(-1)+")"))}}return arr.length==1?arr[0]:arr};let stack2=str=>{let arr=[],ele=str.split(" ").map(e=>e>=0||+e!=+e?e:`(${e})`);for(let i in ele){arr.push(ele[i]);while("+-*/".includes(arr.at(-3))&&(!isNaN(+arr.at(-2))||arr.at(-2).length>1)&&(!isNaN(+arr.at(-1))||arr.at(-1).length>1)){arr.splice(-3,3,`(${arr.at(-2)}${arr.at(-3)}${arr.at(-1)})`)}}return arr[0].slice(1,-1)};let all=new Set;let orders=(prevArr,newArr)=>{if(newArr.length==1){if(newArr[0]=="#")return;prevArr+=newArr[0];all.add(prevArr);return}for(let i in newArr){if(prevArr!=""||newArr[i]=="#"){orders(prevArr+newArr[i]+" ",newArr.toSpliced(i,1))}}};orders("",values.concat("#".repeat(values.length-1).split("")));let data=[...all.values()],data2=[],data3=[];for(let i in data){let sym=[..."1".repeat(values.length-1).split("")];for(let j=0;j<4**(values.length-1);j++){let rep=""+data[i];for(let k in sym){rep=rep.replace("#"," +-*/"[sym[k]])}data2.push(rep);sym[0]++;for(let k in sym){if(sym[k]==5){sym[k]=1;sym[+k+1]++}}}}for(let i in data2){if(stack(data2[i])==count){data3.push(stack2(data2[i]))}}return data3};try{module.exports=make24}catch(e){window.make24=make24}
